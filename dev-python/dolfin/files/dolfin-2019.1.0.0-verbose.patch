--- a/setup.py	2020-04-07 04:28:58.532144146 -0000
+++ b/setup.py	2020-04-07 04:30:51.675637708 -0000
@@ -23,6 +23,16 @@
                 "fenics-ufl{}".format(RESTRICT_REQUIREMENTS),
                 "fenics-dijitso{}".format(RESTRICT_REQUIREMENTS)]
 
+def log_exec(cmd, kwargs):
+    if 'cwd' in kwargs:
+        print("exec in cwd:", kwargs['cwd'])
+    print(" ".join(cmd))
+def exec_check_call(cmd, **kwargs):
+    log_exec(cmd, kwargs)
+    subprocess.check_call(cmd, **kwargs)
+def exec_check_output(cmd, **kwargs):
+    log_exec(cmd, kwargs)
+    return subprocess.check_output(cmd, **kwargs)
 
 class CMakeExtension(Extension):
     def __init__(self, name, sourcedir=''):
@@ -33,7 +43,7 @@
 class CMakeBuild(build_ext):
     def run(self):
         try:
-            out = subprocess.check_output(['cmake', '--version'])
+            out = exec_check_output(['cmake', '--version'])
         except OSError:
             raise RuntimeError("CMake must be installed to build the following extensions: " +
                                ", ".join(e.name for e in self.extensions))
@@ -59,7 +59,8 @@
     def build_extension(self, ext):
         extdir = os.path.abspath(os.path.dirname(self.get_ext_fullpath(ext.name)))
         cmake_args = ['-DCMAKE_LIBRARY_OUTPUT_DIRECTORY=' + extdir,
-                      '-DPYTHON_EXECUTABLE=' + sys.executable]
+                      '-DPYTHON_EXECUTABLE=' + sys.executable,
+                      '-DCMAKE_VERBOSE_MAKEFILE=TRUE']
 
         cfg = 'Debug' if self.debug else 'Release'
         build_args = ['--config', cfg]
@@ -72,8 +82,8 @@
                                                               self.distribution.get_version())
         if not os.path.exists(self.build_temp):
             os.makedirs(self.build_temp)
-        subprocess.check_call(['cmake', ext.sourcedir] + cmake_args, cwd=self.build_temp, env=env)
-        subprocess.check_call(['cmake', '--build', '.'] + build_args, cwd=self.build_temp, env=env)
+        exec_check_call(['cmake', ext.sourcedir] + cmake_args, cwd=self.build_temp, env=env)
+        exec_check_call(['cmake', '--build', '.'] + build_args, cwd=self.build_temp, env=env)
 
 
 setup(name='fenics-dolfin',
