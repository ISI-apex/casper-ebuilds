From ed33554aa4ad7d49030da460c63ff99301580cd8 Mon Sep 17 00:00:00 2001
From: Alexei Colin <acolin@isi.edu>
Date: Wed, 31 Mar 2021 19:23:38 -0400
Subject: [PATCH] slepc4py: build against the SLEPc being built

This fixes an issue with packaging SLEPc+slepc4py. The issue is that the
slepc4py Python extension builds against SLEPc installed in the system.
This effectively requires SLEPc to be installed into the system before
the slepc4py can be built, which is a problem for packaging recipes that
want to `--with-slepc4py=1` and have to stage the files into a DESTDIR
directory (i.e. cannot write then into the final installation prefix).
In this case, SLEPc won't be into its final install location at the time
the top-level build reaches the slepc4py build.

This patch allows slepc4py to build against the SLEPc that is being
built, located in the staging directory (DESTDIR). This involves two
actions:

1. set SLEPC_DIR to DESTDIR/PREFIX in the makefile

2. for output paths that are to be used at runtime, strip DESTDIR
from SLEPC_DIR

PETSc suffers from the same issue (the patch is similar):
https://gitlab.com/petsc/petsc/-/issues/862
https://gitlab.com/petsc/petsc/-/merge_requests/3748

Signed-off-by: Alexei Colin <acolin@isi.edu>
---
 config/packages/slepc4py.py            |  5 ++++-
 src/binding/slepc4py/conf/slepcconf.py | 16 ++++++++++++++--
 2 files changed, 18 insertions(+), 3 deletions(-)

diff --git a/config/packages/slepc4py.py b/config/packages/slepc4py.py
index 703982bd9..5d07e76f2 100644
--- a/config/packages/slepc4py.py
+++ b/config/packages/slepc4py.py
@@ -61,7 +61,10 @@ class Slepc4py(package.Package):
     destdir  = os.path.join(slepc.prefixdir,'lib')
 
     # add makefile rules
-    envvars = 'PETSC_ARCH="" PYTHONPATH=%s SLEPC_DIR=${SLEPC_INSTALLDIR}' % pythonpath if slepc.isinstall else 'PYTHONPATH=%s' % pythonpath
+    envvars = 'PETSC_ARCH="" PYTHONPATH=%s SLEPC_DIR=${DESTDIR}${SLEPC_INSTALLDIR}' % pythonpath if slepc.isinstall else 'PYTHONPATH=%s' % pythonpath
+    envvars = 'PYTHONPATH=%s ' % pythonpath
+    if slepc.isinstall:
+        envvars += 'PETSC_ARCH="" SLEPC_DIR=${DESTDIR}${SLEPC_INSTALLDIR} '
     confdir = os.path.join(destdir,'slepc','conf')
     rule =  'slepc4pybuild:\n'
     rule += '\t@echo "*** Building slepc4py ***"\n'
diff --git a/src/binding/slepc4py/conf/slepcconf.py b/src/binding/slepc4py/conf/slepcconf.py
index d6e3ef5cf..4c19df593 100644
--- a/src/binding/slepc4py/conf/slepcconf.py
+++ b/src/binding/slepc4py/conf/slepcconf.py
@@ -15,6 +15,7 @@ __all__ = ['setup',
 # --------------------------------------------------------------------
 
 import sys, os
+import re
 
 from conf.baseconf import PetscConfig
 from conf.baseconf import setup, Extension, log
@@ -43,11 +44,13 @@ class SlepcConfig(PetscConfig):
             raise DistutilsError("invalid SLEPC_DIR")
         self.configdict['SLEPC_DIR'] = slepc_dir
         self.SLEPC_DIR = self['SLEPC_DIR']
+        self.DESTDIR = os.environ.get('DESTDIR')
 
     def configure_extension(self, extension):
         PetscConfig.configure_extension(self, extension)
         SLEPC_DIR  = self.SLEPC_DIR
         PETSC_ARCH = self.PETSC_ARCH
+        DESTDIR = self.DESTDIR
         # includes and libraries
         SLEPC_INCLUDE = [
             os.path.join(SLEPC_DIR, PETSC_ARCH, 'include'),
@@ -66,7 +69,7 @@ class SlepcConfig(PetscConfig):
         else:
             slepc_libs = ['slepc']
         slepc_cfg['libraries'] = slepc_libs
-        slepc_cfg['runtime_library_dirs'] = slepc_cfg['library_dirs']
+        slepc_cfg['runtime_library_dirs'] = [strip_prefix(DESTDIR, d) for d in SLEPC_LIB_DIR]
         self._configure_ext(extension, slepc_cfg, preppend=True)
         if self['BUILDSHAREDLIB'] == 'no':
             from petsc4py.lib import ImportPETSc
@@ -172,7 +175,11 @@ SLEPC_DIR  = %(SLEPC_DIR)s
 PETSC_DIR  = %(PETSC_DIR)s
 PETSC_ARCH = %(PETSC_ARCH)s
 """
-        variables = {'SLEPC_DIR'  : self.slepc_dir,
+        DESTDIR = None
+        for arch in arch_list:
+            conf = self.get_config_arch(arch)
+            DESTDIR = conf.DESTDIR # all archs will have same value
+        variables = {'SLEPC_DIR'  : strip_prefix(DESTDIR, self.slepc_dir),
                      'PETSC_DIR'  : self.petsc_dir,
                      'PETSC_ARCH' : os.path.pathsep.join(arch_list)}
         return template, variables
@@ -191,3 +198,8 @@ class sdist(_sdist):
     pass
 
 # --------------------------------------------------------------------
+
+def strip_prefix(prefix, string):
+    if not prefix:
+        return string
+    return re.sub(r'^' + prefix, '', string)
-- 
2.30.1

