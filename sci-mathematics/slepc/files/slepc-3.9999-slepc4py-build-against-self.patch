--- a/config/packages/slepc4py.py	2021-03-23 20:32:39.393052000 -0000
+++ b/config/packages/slepc4py.py	2021-03-23 20:36:19.919962000 -0000
@@ -60,7 +60,7 @@
     destdir  = os.path.join(slepc.prefixdir,'lib')
 
     # add makefile rules
-    envvars = 'PETSC_ARCH="" PYTHONPATH=%s SLEPC_DIR=${SLEPC_INSTALLDIR}' % pythonpath if slepc.isinstall else 'PYTHONPATH=%s' % pythonpath
+    envvars = 'PYTHONPATH=%s' % pythonpath
     confdir = os.path.join(destdir,'slepc','conf')
     rule =  'slepc4pybuild:\n'
     rule += '\t@echo "*** Building slepc4py ***"\n'
--- a/src/binding/slepc4py/conf/slepcconf.py	2021-03-23 20:53:29.420660000 -0000
+++ b/src/binding/slepc4py/conf/slepcconf.py	2021-03-23 21:05:03.242332000 -0000
@@ -41,32 +41,75 @@
             raise DistutilsError("SLEPc not found")
         if not os.path.isdir(slepc_dir):
             raise DistutilsError("invalid SLEPC_DIR")
-        self.configdict['SLEPC_DIR'] = slepc_dir
+
+        self.configdict.update(self._get_slepc_config(slepc_dir))
+
+        # When building slepc4py within the same build as SLEPc (i.e.  without
+        # having SLEPc already installed in the system), the SLEPC_DIR from
+        # the slecpvariables file generated by the config phase and the slepc_dir
+        # argument given to us should both be pointing to the work directory
+        # where SLEPc is being built, not its final installation path.
+        if self['SLEPC_DIR'] != slepc_dir:
+            raise DistutilsError("mismatch in SLEPC_DIR " +
+                    "between config phase and build phase")
         self.SLEPC_DIR = self['SLEPC_DIR']
+        self.SLEPC_INSTALLDIR = self['SLEPC_INSTALLDIR']
+        # Note: this PETSC_ARCH value had been overridden by SLEPc config
+        self.PETSC_ARCH = self['PETSC_ARCH']
+
+    def _read_config(self, conffile):
+        """Reads the variables in a Makefile file into a dictionary"""
+        try:
+            from cStringIO import StringIO
+        except ImportError:
+            from io import StringIO
+        with open(conffile) as f:
+            contents = f.read()
+        return makefile(StringIO(contents))
+    
+    def _get_slepc_config(self, slepc_dir):
+        """Read SLEPc configuration generated by configure stage
+        
+        Config stage generates two slepcvariables files, read both.
+        """
+        from os.path import join, isdir, exists
+
+        slepcvariables = join('lib', 'slepc', 'conf', 'slepcvariables')
+        confdict = self._read_config(join(slepc_dir, slepcvariables))
+
+        petsc_arch = confdict['PETSC_ARCH'] # from first file
+        arch_confdict = self._read_config(join(slepc_dir, petsc_arch,
+            slepcvariables))
+        print(arch_confdict)
+
+        confdict.update(arch_confdict)
+        return confdict
 
     def configure_extension(self, extension):
         PetscConfig.configure_extension(self, extension)
-        SLEPC_DIR  = self.SLEPC_DIR
+
+        SLEPC_DIR = self.SLEPC_DIR
+        SLEPC_INSTALLDIR = self.SLEPC_INSTALLDIR
         PETSC_ARCH = self.PETSC_ARCH
-        # includes and libraries
-        SLEPC_INCLUDE = [
+
+        slepc_cfg = { }
+        slepc_cfg['include_dirs'] = [
             os.path.join(SLEPC_DIR, PETSC_ARCH, 'include'),
             os.path.join(SLEPC_DIR, 'include'),
-            ]
-        SLEPC_LIB_DIR = [
+        ]
+        slepc_cfg['library_dirs'] = [
             os.path.join(SLEPC_DIR, PETSC_ARCH, 'lib'),
             os.path.join(SLEPC_DIR, 'lib'),
-            ]
-        slepc_cfg = { }
-        slepc_cfg['include_dirs'] = SLEPC_INCLUDE
-        slepc_cfg['library_dirs'] = SLEPC_LIB_DIR
+        ]
+        slepc_cfg['runtime_library_dirs'] = [
+            os.path.join(SLEPC_INSTALLDIR, PETSC_ARCH, 'lib'),
+            os.path.join(SLEPC_INSTALLDIR, 'lib'),
+        ]
         if 'petscvec' in self['PETSC_LIB']:
-            slepc_variables = os.path.join(SLEPC_DIR, 'lib', 'slepc', 'conf', 'slepc_variables')
-            slepc_libs = makefile(open(slepc_variables, 'rt')).get('SHLIBS').replace('lib', '').split()
+            slepc_libs = self.get('SHLIBS', '').replace('lib', '').split()
         else:
             slepc_libs = ['slepc']
         slepc_cfg['libraries'] = slepc_libs
-        slepc_cfg['runtime_library_dirs'] = slepc_cfg['library_dirs']
         self._configure_ext(extension, slepc_cfg, preppend=True)
         if self['BUILDSHAREDLIB'] == 'no':
             from petsc4py.lib import ImportPETSc
@@ -80,8 +123,11 @@
         extension.extra_link_args.extend(lflags)
 
     def log_info(self):
-        if not self.SLEPC_DIR: return
-        log.info('SLEPC_DIR:    %s' % self.SLEPC_DIR)
+        SLEPC_DIR = self.SLEPC_DIR if self.SLEPC_DIR else '<empty>'
+        SLEPC_INSTALLDIR = self.SLEPC_INSTALLDIR \
+                if self.SLEPC_INSTALLDIR else '<empty>'
+        log.info('SLEPC_DIR:           %s' % SLEPC_DIR)
+        log.info('SLEPC_INSTALLDIR:    %s' % SLEPC_INSTALLDIR)
         PetscConfig.log_info(self)
 
 
--- a/src/binding/slepc4py/conf/baseconf.py	2021-03-23 21:20:06.765909000 -0000
+++ b/src/binding/slepc4py/conf/baseconf.py	2021-03-23 21:20:33.882997107 -0000
@@ -263,15 +263,15 @@
         language     = self['PETSC_LANGUAGE']
         compiler     = self['PCC']
         linker       = self['PCC_LINKER']
-        log.info('PETSC_DIR:    %s' % PETSC_DIR )
-        log.info('PETSC_ARCH:   %s' % PETSC_ARCH )
-        log.info('version:      %s' % version_info)
-        log.info('integer-size: %s' % integer_size)
-        log.info('scalar-type:  %s' % scalar_type)
-        log.info('precision:    %s' % precision)
-        log.info('language:     %s' % language)
-        log.info('compiler:     %s' % compiler)
-        log.info('linker:       %s' % linker)
+        log.info('PETSC_DIR:           %s' % PETSC_DIR )
+        log.info('PETSC_ARCH:          %s' % PETSC_ARCH )
+        log.info('version:             %s' % version_info)
+        log.info('integer-size:        %s' % integer_size)
+        log.info('scalar-type:         %s' % scalar_type)
+        log.info('precision:           %s' % precision)
+        log.info('language:            %s' % language)
+        log.info('compiler:            %s' % compiler)
+        log.info('linker:              %s' % linker)
 
 # --------------------------------------------------------------------
 
