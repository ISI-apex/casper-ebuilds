--- a/config/packages/slepc4py.py
+++ b/config/packages/slepc4py.py
@@ -60,7 +60,12 @@ class Slepc4py(package.Package):
     destdir  = os.path.join(slepc.prefixdir,'lib')
 
     # add makefile rules
-    envvars = 'PETSC_ARCH="" PYTHONPATH=%s SLEPC_DIR=${SLEPC_INSTALLDIR}' % pythonpath if slepc.isinstall else 'PYTHONPATH=%s' % pythonpath
+    envvars = 'PYTHONPATH=%s ' % pythonpath
+    # override SLEPC_DIR/PETSC_ARCH path to the final install directory, but
+    # preserve the values set by the top-level makefile, which point to the
+    # working directory where SLEPc is being built.
+    envvars += 'SLEPC_BUILD_DIR=$(SLEPC_DIR) SLEPC_DIR=${SLEPC_INSTALLDIR} '
+    envvars += 'PETSC_BUILD_ARCH=$(PETSC_ARCH) PETSC_ARCH="" '
     confdir = os.path.join(destdir,'slepc','conf')
     rule =  'slepc4pybuild:\n'
     rule += '\t@echo "*** Building slepc4py ***"\n'
--- a/src/binding/slepc4py/conf/baseconf.py
+++ b/src/binding/slepc4py/conf/baseconf.py
@@ -263,15 +263,15 @@ class PetscConfig:
         language     = self['PETSC_LANGUAGE']
         compiler     = self['PCC']
         linker       = self['PCC_LINKER']
-        log.info('PETSC_DIR:    %s' % PETSC_DIR )
-        log.info('PETSC_ARCH:   %s' % PETSC_ARCH )
-        log.info('version:      %s' % version_info)
-        log.info('integer-size: %s' % integer_size)
-        log.info('scalar-type:  %s' % scalar_type)
-        log.info('precision:    %s' % precision)
-        log.info('language:     %s' % language)
-        log.info('compiler:     %s' % compiler)
-        log.info('linker:       %s' % linker)
+        log.info('PETSC_DIR:           %s' % PETSC_DIR )
+        log.info('PETSC_ARCH:          %s' % PETSC_ARCH )
+        log.info('version:             %s' % version_info)
+        log.info('integer-size:        %s' % integer_size)
+        log.info('scalar-type:         %s' % scalar_type)
+        log.info('precision:           %s' % precision)
+        log.info('language:            %s' % language)
+        log.info('compiler:            %s' % compiler)
+        log.info('linker:              %s' % linker)
 
 # --------------------------------------------------------------------
 
--- a/src/binding/slepc4py/conf/slepcconf.py	2021-03-24 23:02:39.620724000 -0000
+++ b/src/binding/slepc4py/conf/slepcconf.py	2021-03-24 23:04:58.699269000 -0000
@@ -37,36 +37,54 @@
 
     def __init__(self,  slepc_dir, petsc_dir, petsc_arch):
         PetscConfig.__init__(self, petsc_dir, petsc_arch)
-        if not slepc_dir:
-            raise DistutilsError("SLEPc not found")
-        if not os.path.isdir(slepc_dir):
-            raise DistutilsError("invalid SLEPC_DIR")
-        self.configdict['SLEPC_DIR'] = slepc_dir
-        self.SLEPC_DIR = self['SLEPC_DIR']
+
+        # Top-level makefile may set the paths to the directory where SLEPc is
+        # being built, and the inner makefile (slepcrules) preserves them into
+        # these *_BUILD_* variables; we retrieve them here.
+        slepc_build_dir = os.environ.get('SLEPC_BUILD_DIR', slepc_dir)
+        petsc_build_arch = os.environ.get('PETSC_BUILD_ARCH', petsc_arch)
+
+        if not slepc_build_dir:
+            raise DistutilsError("SLEPc directory was not specified")
+        if not os.path.isdir(slepc_build_dir):
+            raise DistutilsError("SLEPC_DIR directory is invalid: %s" \
+                    % slepc_build_dir)
+
+        # Final installation path
+        self.SLEPC_DIR = slepc_dir
+        self.PETSC_ARCH = petsc_arch if petsc_arch is not None else ''
+
+        # Working directory where SLEPc is being built
+        self.SLEPC_BUILD_DIR = slepc_build_dir
+        self.PETSC_BUILD_ARCH = petsc_build_arch \
+            if petsc_build_arch is not None else ''
 
     def configure_extension(self, extension):
         PetscConfig.configure_extension(self, extension)
         SLEPC_DIR  = self.SLEPC_DIR
         PETSC_ARCH = self.PETSC_ARCH
-        # includes and libraries
-        SLEPC_INCLUDE = [
-            os.path.join(SLEPC_DIR, PETSC_ARCH, 'include'),
-            os.path.join(SLEPC_DIR, 'include'),
-            ]
-        SLEPC_LIB_DIR = [
+        SLEPC_BUILD_DIR = self.SLEPC_BUILD_DIR
+        PETSC_BUILD_ARCH = self.PETSC_BUILD_ARCH
+
+        slepc_cfg = { }
+        slepc_cfg['include_dirs'] = [
+            os.path.join(SLEPC_BUILD_DIR, PETSC_BUILD_ARCH, 'include'),
+            os.path.join(SLEPC_BUILD_DIR, 'include'),
+        ]
+        slepc_cfg['library_dirs'] = [
+            os.path.join(SLEPC_BUILD_DIR, PETSC_BUILD_ARCH, 'lib'),
+            os.path.join(SLEPC_BUILD_DIR, 'lib'),
+        ]
+        slepc_cfg['runtime_library_dirs'] = [
             os.path.join(SLEPC_DIR, PETSC_ARCH, 'lib'),
             os.path.join(SLEPC_DIR, 'lib'),
-            ]
-        slepc_cfg = { }
-        slepc_cfg['include_dirs'] = SLEPC_INCLUDE
-        slepc_cfg['library_dirs'] = SLEPC_LIB_DIR
+        ]
         if 'petscvec' in self['PETSC_LIB']:
             slepc_variables = os.path.join(SLEPC_DIR, 'lib', 'slepc', 'conf', 'slepc_variables')
             slepc_libs = makefile(open(slepc_variables, 'rt')).get('SHLIBS').replace('lib', '').split()
         else:
             slepc_libs = ['slepc']
         slepc_cfg['libraries'] = slepc_libs
-        slepc_cfg['runtime_library_dirs'] = slepc_cfg['library_dirs']
         self._configure_ext(extension, slepc_cfg, preppend=True)
         if self['BUILDSHAREDLIB'] == 'no':
             from petsc4py.lib import ImportPETSc
@@ -80,8 +98,8 @@
         extension.extra_link_args.extend(lflags)
 
     def log_info(self):
-        if not self.SLEPC_DIR: return
-        log.info('SLEPC_DIR:    %s' % self.SLEPC_DIR)
+        log.info('SLEPC_DIR:           %s' % self.SLEPC_DIR)
+        log.info('SLEPC_BUILD_DIR:     %s' % self.SLEPC_BUILD_DIR)
         PetscConfig.log_info(self)
 
 
