--- a/src/mat/impls/aij/mpi/pastix/pastix.c	2020-04-25 03:24:29.121190682 -0000
+++ b/src/mat/impls/aij/mpi/pastix/pastix.c	2020-04-25 06:11:00.581499315 -0000
@@ -14,23 +14,77 @@
 #include <pastix.h>
 EXTERN_C_END
 
+/* From v5 -> v6 the name of the version macro changed */
+#ifndef PASTIX_VERSION_MAJOR
+#ifdef PASTIX_MAJOR_VERSION
+#define PASTIX_VERSION_MAJOR PASTIX_MAJOR_VERSION
+#else
+#error No version macro found in PaStiX header.
+#endif
+#endif
+
+#if PASTIX_VERSION_MAJOR >= 6
+
+/* Use the v5 compatibility layer in v6: single entrypoint for all precision
+ * types, so IPARM_FLOAT must be explicitly set; returns error code. */
+
+EXTERN_C_BEGIN
+#include <pastix/old_api.h>
+EXTERN_C_END
+
+/* to allow the same code for both versions in the consumer */
+#define PASTIX_CALL(rc, ...) do { \
+  rc = pastix(__VA_ARGS__); \
+} while(0)
+
+#define P_IPARM_MAT_TYPE_FIELD IPARM_MTX_TYPE
+
+#if defined(PETSC_USE_COMPLEX)
+
+#if defined(PETSC_USE_REAL_SINGLE)
+#define P_IPARM_FLOAT API_COMPLEXSINGLE
+#else
+#define P_IPARM_FLOAT API_COMPLEXDOUBLE
+#endif
+
+#else /* PETSC_USE_COMPLEX */
+
+#if defined(PETSC_USE_REAL_SINGLE)
+#define P_IPARM_FLOAT API_REALSINGLE
+#else
+#define P_IPARM_FLOAT API_REALDOUBLE
+#endif
+
+#endif /* PETSC_USE_COMPLEX */
+
+#elif PASTIX_VERSION_MAJOR <= 5
+
+#define P_IPARM_MAT_TYPE_FIELD IPARM_SYM
+
 #if defined(PETSC_USE_COMPLEX)
 #if defined(PETSC_USE_REAL_SINGLE)
-#define PASTIX_CALL c_pastix
+#define PASTIX_CALL_F c_pastix
 #else
-#define PASTIX_CALL z_pastix
+#define PASTIX_CALL_F z_pastix
 #endif
 
 #else /* PETSC_USE_COMPLEX */
 
 #if defined(PETSC_USE_REAL_SINGLE)
-#define PASTIX_CALL s_pastix
+#define PASTIX_CALL_F s_pastix
 #else
-#define PASTIX_CALL d_pastix
+#define PASTIX_CALL_F d_pastix
 #endif
 
+#define PASTIX_CALL(rc,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a_iparm,a12) do { \
+  PASTIX_CALL_F(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a_iparm,a12); \
+  rc = (a_iparm)[IPARM_ERROR_NUMBER];  \
+} while(0)
+
 #endif /* PETSC_USE_COMPLEX */
 
+#endif /* PASTIX_VERSION_MAJOR / PASTIX_VERSION_MAJOR */
+
 typedef PetscScalar PastixScalar;
 
 typedef struct Mat_Pastix_ {
@@ -175,6 +229,7 @@
 {
   Mat_Pastix     *lu=(Mat_Pastix*)A->data;
   PetscErrorCode ierr;
+  int            rc;
 
   PetscFunctionBegin;
   if (lu->CleanUpPastix) {
@@ -186,7 +241,8 @@
     lu->iparm[IPARM_START_TASK]=API_TASK_CLEAN;
     lu->iparm[IPARM_END_TASK]  =API_TASK_CLEAN;
 
-    PASTIX_CALL(&(lu->pastix_data),
+    PASTIX_CALL(rc,
+                &(lu->pastix_data),
                 lu->pastix_comm,
                 lu->n,
                 lu->colptr,
@@ -198,7 +254,8 @@
                 lu->rhsnbr,
                 lu->iparm,
                 lu->dparm);
-    if (lu->iparm[IPARM_ERROR_NUMBER] != 0) SETERRQ1(PETSC_COMM_SELF,PETSC_ERR_LIB,"Error reported by PaStiX in destroy: iparm(IPARM_ERROR_NUMBER)=%d\n",lu->iparm[IPARM_ERROR_NUMBER]);
+    if (rc != 0) SETERRQ1(PETSC_COMM_SELF,PETSC_ERR_LIB,
+        "Error reported by PaStiX in destroy: rc %d\n", rc);
     ierr = PetscFree(lu->colptr);CHKERRQ(ierr);
     ierr = PetscFree(lu->row);CHKERRQ(ierr);
     ierr = PetscFree(lu->val);CHKERRQ(ierr);
@@ -221,6 +278,7 @@
   PetscScalar    *array;
   Vec            x_seq;
   PetscErrorCode ierr;
+  int            rc;
 
   PetscFunctionBegin;
   lu->rhsnbr = 1;
@@ -247,7 +305,8 @@
   lu->iparm[IPARM_END_TASK]   = API_TASK_REFINE;
   lu->iparm[IPARM_RHS_MAKING] = API_RHS_B;
 
-  PASTIX_CALL(&(lu->pastix_data),
+  PASTIX_CALL(rc,
+              &(lu->pastix_data),
               lu->pastix_comm,
               lu->n,
               lu->colptr,
@@ -259,7 +318,8 @@
               lu->rhsnbr,
               lu->iparm,
               lu->dparm);
-  if (lu->iparm[IPARM_ERROR_NUMBER] != 0) SETERRQ1(PETSC_COMM_SELF,PETSC_ERR_LIB,"Error reported by PaStiX in solve phase: lu->iparm[IPARM_ERROR_NUMBER] = %d\n",lu->iparm[IPARM_ERROR_NUMBER]);
+  if (rc != 0) SETERRQ1(PETSC_COMM_SELF, PETSC_ERR_LIB,
+      "Error reported by PaStiX in solve phase: lu->iparm[IPARM_ERROR_NUMBER] = %d\n", rc);
 
   if (lu->commSize == 1) {
     ierr = VecRestoreArray(x,&(lu->rhs));CHKERRQ(ierr);
@@ -290,6 +350,7 @@
   Vec            b;
   IS             isrow;
   PetscBool      isSeqAIJ,isSeqSBAIJ,isMPIAIJ;
+  int            rc;
 
   PetscFunctionBegin;
   ierr = PetscObjectTypeCompare((PetscObject)A,MATSEQAIJ,&isSeqAIJ);CHKERRQ(ierr);
@@ -311,7 +372,8 @@
     lu->rhsnbr = 1;
 
     /* Call to set default pastix options */
-    PASTIX_CALL(&(lu->pastix_data),
+    PASTIX_CALL(rc,
+                &(lu->pastix_data),
                 lu->pastix_comm,
                 lu->n,
                 lu->colptr,
@@ -323,7 +385,12 @@
                 lu->rhsnbr,
                 lu->iparm,
                 lu->dparm);
-    if (lu->iparm[IPARM_ERROR_NUMBER] != 0) SETERRQ1(PETSC_COMM_SELF,PETSC_ERR_LIB,"Error reported by PaStiX in MatFactorNumeric: iparm(IPARM_ERROR_NUMBER)=%d\n",lu->iparm[IPARM_ERROR_NUMBER]);
+    if (rc != 0) SETERRQ1(PETSC_COMM_SELF, PETSC_ERR_LIB,
+        "Error reported by PaStiX setup in MatFactorNumeric: rc %d\n", rc);
+
+#if PASTIX_VERSION_MAJOR >= 6
+    lu->iparm[IPARM_FLOAT] = P_IPARM_FLOAT;
+#endif /* PASTIX_VERSION_MAJOR */
 
     ierr = PetscOptionsBegin(PetscObjectComm((PetscObject)A),((PetscObject)A)->prefix,"PaStiX Options","Mat");CHKERRQ(ierr);
     icntl = -1;
@@ -348,7 +415,9 @@
     } else valOnly = PETSC_TRUE;
   }
 
+#if PASTIX_VERSION_MAJOR <= 5
   lu->iparm[IPARM_MATRIX_VERIFICATION] = API_YES;
+#endif
 
   /* convert mpi A to seq mat A */
   ierr = ISCreateStride(PETSC_COMM_SELF,M,0,1,&isrow);CHKERRQ(ierr);
@@ -366,11 +435,11 @@
 
   if (isSym) {
     /* On symmetric matrix, LLT */
-    lu->iparm[IPARM_SYM]           = API_SYM_YES;
+    lu->iparm[P_IPARM_MAT_TYPE_FIELD]           = API_SYM_YES;
     lu->iparm[IPARM_FACTORIZATION] = API_FACT_LDLT;
   } else {
     /* On unsymmetric matrix, LU */
-    lu->iparm[IPARM_SYM]           = API_SYM_NO;
+    lu->iparm[P_IPARM_MAT_TYPE_FIELD]           = API_SYM_NO;
     lu->iparm[IPARM_FACTORIZATION] = API_FACT_LU;
   }
 
@@ -389,7 +458,8 @@
     lu->iparm[IPARM_START_TASK] = API_TASK_ORDERING;
     lu->iparm[IPARM_END_TASK]   = API_TASK_NUMFACT;
 
-    PASTIX_CALL(&(lu->pastix_data),
+    PASTIX_CALL(rc,
+                &(lu->pastix_data),
                 lu->pastix_comm,
                 lu->n,
                 lu->colptr,
@@ -401,11 +471,13 @@
                 lu->rhsnbr,
                 lu->iparm,
                 lu->dparm);
-    if (lu->iparm[IPARM_ERROR_NUMBER] != 0) SETERRQ1(PETSC_COMM_SELF,PETSC_ERR_LIB,"Error reported by PaStiX in analysis phase: iparm(IPARM_ERROR_NUMBER)=%d\n",lu->iparm[IPARM_ERROR_NUMBER]);
+    if (rc != 0) SETERRQ1(PETSC_COMM_SELF, PETSC_ERR_LIB,
+        "Error reported by PaStiX in analysis phase: rc %d\n", rc);
   } else {
     lu->iparm[IPARM_START_TASK] = API_TASK_NUMFACT;
     lu->iparm[IPARM_END_TASK]   = API_TASK_NUMFACT;
-    PASTIX_CALL(&(lu->pastix_data),
+    PASTIX_CALL(rc,
+                &(lu->pastix_data),
                 lu->pastix_comm,
                 lu->n,
                 lu->colptr,
@@ -417,7 +489,8 @@
                 lu->rhsnbr,
                 lu->iparm,
                 lu->dparm);
-    if (lu->iparm[IPARM_ERROR_NUMBER] != 0) SETERRQ1(PETSC_COMM_SELF,PETSC_ERR_LIB,"Error reported by PaStiX in analysis phase: iparm(IPARM_ERROR_NUMBER)=%d\n",lu->iparm[IPARM_ERROR_NUMBER]);
+    if (rc != 0) SETERRQ1(PETSC_COMM_SELF, PETSC_ERR_LIB,
+        "Error reported by PaStiX in analysis phase: rc %d\n", rc);
   }
 
   (F)->assembled    = PETSC_TRUE;
@@ -433,7 +506,7 @@
 
   PetscFunctionBegin;
   lu->iparm[IPARM_FACTORIZATION] = API_FACT_LU;
-  lu->iparm[IPARM_SYM]           = API_SYM_YES;
+  lu->iparm[P_IPARM_MAT_TYPE_FIELD]           = API_SYM_YES;
   lu->matstruc                   = DIFFERENT_NONZERO_PATTERN;
   F->ops->lufactornumeric        = MatFactorNumeric_PaStiX;
   PetscFunctionReturn(0);
@@ -447,7 +520,7 @@
 
   PetscFunctionBegin;
   lu->iparm[IPARM_FACTORIZATION]  = API_FACT_LLT;
-  lu->iparm[IPARM_SYM]            = API_SYM_NO;
+  lu->iparm[P_IPARM_MAT_TYPE_FIELD]            = API_SYM_NO;
   lu->matstruc                    = DIFFERENT_NONZERO_PATTERN;
   (F)->ops->choleskyfactornumeric = MatFactorNumeric_PaStiX;
   PetscFunctionReturn(0);
@@ -467,7 +540,7 @@
       Mat_Pastix *lu=(Mat_Pastix*)A->data;
 
       ierr = PetscViewerASCIIPrintf(viewer,"PaStiX run parameters:\n");CHKERRQ(ierr);
-      ierr = PetscViewerASCIIPrintf(viewer,"  Matrix type :                      %s \n",((lu->iparm[IPARM_SYM] == API_SYM_YES) ? "Symmetric" : "Unsymmetric"));CHKERRQ(ierr);
+      ierr = PetscViewerASCIIPrintf(viewer,"  Matrix type :                      %s \n",((lu->iparm[P_IPARM_MAT_TYPE_FIELD] == API_SYM_YES) ? "Symmetric" : "Unsymmetric"));CHKERRQ(ierr);
       ierr = PetscViewerASCIIPrintf(viewer,"  Level of printing (0,1,2):         %d \n",lu->iparm[IPARM_VERBOSE]);CHKERRQ(ierr);
       ierr = PetscViewerASCIIPrintf(viewer,"  Number of refinements iterations : %d \n",lu->iparm[IPARM_NBITER]);CHKERRQ(ierr);
       ierr = PetscPrintf(PETSC_COMM_SELF,"  Error :                        %g \n",lu->dparm[DPARM_RELATIVE_ERROR]);CHKERRQ(ierr);
--- a/src/mat/impls/aij/mpi/pastix/pastix.c	2020-04-26 04:42:23.646091016 -0000
+++ b/src/mat/impls/aij/mpi/pastix/pastix.c	2020-04-26 07:42:31.719008688 -0000
@@ -303,7 +303,10 @@
   /*-------------*/
   lu->iparm[IPARM_START_TASK] = API_TASK_SOLVE;
   lu->iparm[IPARM_END_TASK]   = API_TASK_REFINE;
+#if PASTIX_VERSION_MAJOR <= 5
+  /* In v6 this field index is -1: b is always taken from argument */
   lu->iparm[IPARM_RHS_MAKING] = API_RHS_B;
+#endif /* PASTIX_VERSION_MAJOR */
 
   PASTIX_CALL(rc,
               &(lu->pastix_data),
@@ -388,10 +391,6 @@
     if (rc != 0) SETERRQ1(PETSC_COMM_SELF, PETSC_ERR_LIB,
         "Error reported by PaStiX setup in MatFactorNumeric: rc %d\n", rc);
 
-#if PASTIX_VERSION_MAJOR >= 6
-    lu->iparm[IPARM_FLOAT] = P_IPARM_FLOAT;
-#endif /* PASTIX_VERSION_MAJOR */
-
     ierr = PetscOptionsBegin(PetscObjectComm((PetscObject)A),((PetscObject)A)->prefix,"PaStiX Options","Mat");CHKERRQ(ierr);
     icntl = -1;
     lu->iparm[IPARM_VERBOSE] = API_VERBOSE_NOT;
@@ -405,6 +404,32 @@
       lu->iparm[IPARM_THREAD_NBR] = icntl;
     }
     PetscOptionsEnd();
+
+#if PASTIX_VERSION_MAJOR >= 6
+    lu->iparm[IPARM_FLOAT] = P_IPARM_FLOAT;
+
+    /* These were reset to the full task chain by the above call */
+    lu->iparm[IPARM_START_TASK]       = API_TASK_INIT;
+    lu->iparm[IPARM_END_TASK]         = API_TASK_INIT;
+
+    /* Init the data struct (in <=v5, this happened within any later task) */
+    PASTIX_CALL(rc,
+                &(lu->pastix_data),
+                lu->pastix_comm,
+                lu->n,
+                lu->colptr,
+                lu->row,
+                (PastixScalar*)lu->val,
+                lu->perm,
+                lu->invp,
+                (PastixScalar*)lu->rhs,
+                lu->rhsnbr,
+                lu->iparm,
+                lu->dparm);
+    if (rc != 0) SETERRQ1(PETSC_COMM_SELF, PETSC_ERR_LIB,
+        "Error reported by PaStiX init in MatFactorNumeric: rc %d\n", rc);
+#endif /* PASTIX_VERSION_MAJOR */
+
     valOnly = PETSC_FALSE;
   } else {
     if (isSeqAIJ || isMPIAIJ) {
