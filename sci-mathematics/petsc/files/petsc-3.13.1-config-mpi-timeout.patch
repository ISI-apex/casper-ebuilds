--- a/config/BuildSystem/config/packages/MPI.py	2021-02-02 17:54:29.130753706 -0000
+++ b/config/BuildSystem/config/packages/MPI.py	2021-02-02 17:54:59.979641221 -0000
@@ -216,7 +216,7 @@
     # using mpiexec environmental variables make sure mpiexec matches the MPI libraries and save the variables for testing in PetscInitialize()
     # the variable HAVE_MPIEXEC_ENVIRONMENTAL_VARIABLE is not currently used. PetscInitialize() can check the existence of the environmental variable to
     # determine if the program has been started with the correct mpiexec (will only be set for parallel runs so not clear how to check appropriately)
-    (out, err, ret) = Configure.executeShellCommand(self.mpiexec+' -n 1 printenv', checkCommand = noCheck, timeout = 60, threads = 1, log = self.log)
+    (out, err, ret) = Configure.executeShellCommand(self.mpiexec+' -n 1 printenv', checkCommand = noCheck, timeout = 120, threads = 1, log = self.log)
     if ret:
       self.logWrite('Unable to run '+self.mpiexec+' with option "-n 1 printenv"\nThis could be ok, some MPI implementations such as SGI produce a non-zero status with non-MPI programs\n'+out+err)
     else:
@@ -237,7 +237,7 @@
     includes = '#include <mpi.h>'
     body = 'MPI_Init(0,0);\nMPI_Finalize();\n'
     try:
-      ok = self.checkRun(includes, body, executor = self.mpiexec, timeout = 60, threads = 1)
+      ok = self.checkRun(includes, body, executor = self.mpiexec, timeout = 120, threads = 1)
       if not ok: raise RuntimeError('Unable to run MPI program with '+self.mpiexec+' make sure this is the correct program to run MPI jobs')
     except RuntimeError as e:
       if str(e).find('Runaway process exceeded time limit') > -1:
--- a/config/BuildSystem/config/packages/MPI.py	2021-02-02 18:06:44.104573816 -0000
+++ b/config/BuildSystem/config/packages/MPI.py	2021-02-02 18:06:53.774225769 -0000
@@ -356,7 +356,7 @@
             self.addDefine('HAVE_'+datatype, 1)
         elif not self.argDB['with-batch']:
           self.pushLanguage('C')
-          if self.checkRun(includes, body, defaultArg = 'known-mpi-'+name, executor = self.mpiexec):
+          if self.checkRun(includes, body, defaultArg = 'known-mpi-'+name, executor = self.mpiexec, timeout = 120):
             self.addDefine('HAVE_'+datatype, 1)
           self.popLanguage()
         else:
